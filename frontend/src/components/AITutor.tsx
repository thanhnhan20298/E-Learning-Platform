"use client";

import { useState } from "react";
import { Send, MessageSquare, Mic, Volume2 } from "lucide-react";

export default function AITutor() {
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: "ai",
      content:
        "Xin ch√†o! T√¥i l√† AI Tutor c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n h·ªçc ti·∫øng Anh, s·ª≠a l·ªói ng·ªØ ph√°p, v√† luy·ªán ph√°t √¢m. B·∫°n mu·ªën b·∫Øt ƒë·∫ßu v·ªõi ƒëi·ªÅu g√¨?",
      timestamp: new Date(),
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isRecording, setIsRecording] = useState(false);

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: "user",
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    const currentMessage = inputMessage;
    setInputMessage("");

    try {
      // G·ªçi API backend
      console.log("üöÄ Calling API:", currentMessage);
      const response = await fetch("http://localhost:5000/api/ai/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: currentMessage }),
      });

      const data = await response.json();
      console.log("‚úÖ API Response:", data);

      const aiResponse = {
        id: Date.now() + 1,
        type: "ai",
        content:
          data.data?.response ||
          data.response ||
          data.message ||
          "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph·∫£n h·ªìi l√∫c n√†y.",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiResponse]);
    } catch (error) {
      console.error("‚ùå API Error:", error);
      // Fallback to mock response if API fails
      const aiResponse = {
        id: Date.now() + 1,
        type: "ai",
        content: generateAIResponse(currentMessage),
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, aiResponse]);
    }
  };

  const generateAIResponse = (userInput: string): string => {
    const responses = [
      "Tuy·ªát v·ªùi! C√¢u c·ªßa b·∫°n c√≥ c·∫•u tr√∫c ƒë√∫ng. H√£y th·ª≠ th√™m m·ªôt s·ªë t√≠nh t·ª´ ƒë·ªÉ l√†m cho c√¢u sinh ƒë·ªông h∆°n.",
      'T√¥i nh·∫≠n th·∫•y m·ªôt l·ªói nh·ªè v·ªÅ ng·ªØ ph√°p. Thay v√¨ "was went", b·∫°n n√™n s·ª≠ d·ª•ng "went" ho·∫∑c "was going".',
      'Ph√°t √¢m c·ªßa b·∫°n r·∫•t t·ªët! H√£y ch√∫ √Ω ƒë·∫øn √¢m /th/ trong t·ª´ "think". Th·ª≠ ƒë·∫∑t l∆∞·ª°i gi·ªØa rƒÉng.',
      "B·∫°n c√≥ mu·ªën luy·ªán t·∫≠p v·ªõi m·ªôt s·ªë t·ª´ v·ª±ng m·ªõi kh√¥ng? T√¥i c√≥ th·ªÉ g·ª£i √Ω m·ªôt s·ªë ch·ªß ƒë·ªÅ th√∫ v·ªã.",
      "H√£y th·ª≠ di·ªÖn ƒë·∫°t √Ω t∆∞·ªüng n√†y b·∫±ng c√°ch kh√°c. C√≥ nhi·ªÅu c√°ch ƒë·ªÉ n√≥i c√πng m·ªôt ƒëi·ªÅu trong ti·∫øng Anh!",
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const toggleRecording = () => {
    setIsRecording(!isRecording);
    if (!isRecording) {
      // Simulate speech recognition
      setTimeout(() => {
        setInputMessage(
          "This is a transcribed message from speech recognition"
        );
        setIsRecording(false);
      }, 3000);
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-primary-600 to-accent-600 p-6">
          <h1 className="text-3xl font-bold text-white mb-2">
            AI English Tutor
          </h1>
          <p className="text-white/90">
            Tr√≤ chuy·ªán v·ªõi AI ƒë·ªÉ c·∫£i thi·ªán ti·∫øng Anh c·ªßa b·∫°n
          </p>
        </div>

        {/* Chat Messages */}
        <div className="h-96 overflow-y-auto p-6 space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${
                message.type === "user" ? "justify-end" : "justify-start"
              }`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                  message.type === "user"
                    ? "bg-primary-600 text-white"
                    : "bg-gray-100 text-gray-900"
                }`}
              >
                <p className="text-sm">{message.content}</p>
                <div className="flex items-center gap-2 mt-2">
                  {message.type === "ai" && (
                    <button className="text-gray-500 hover:text-primary-600">
                      <Volume2 className="w-4 h-4" />
                    </button>
                  )}
                  <span className="text-xs opacity-70">
                    {message.timestamp.toLocaleTimeString()}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Input Area */}
        <div className="border-t p-6">
          <div className="flex items-center gap-3">
            <div className="flex-1 relative">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && sendMessage()}
                placeholder="Nh·∫≠p tin nh·∫Øn ho·∫∑c s·ª≠ d·ª•ng mic ƒë·ªÉ n√≥i..."
                className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
              />
            </div>
            <button
              onClick={toggleRecording}
              className={`p-3 rounded-xl transition-colors ${
                isRecording
                  ? "bg-red-500 text-white"
                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
              }`}
            >
              <Mic className="w-5 h-5" />
            </button>
            <button
              onClick={sendMessage}
              className="bg-primary-600 text-white p-3 rounded-xl hover:bg-primary-700 transition-colors"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>
          {isRecording && (
            <div className="mt-3 flex items-center gap-2 text-red-500">
              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
              <span className="text-sm">ƒêang ghi √¢m...</span>
            </div>
          )}
        </div>

        {/* Quick Actions */}
        <div className="border-t p-6 bg-gray-50">
          <h3 className="text-sm font-semibold text-gray-700 mb-3">
            G·ª£i √Ω c√¢u h·ªèi:
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {[
              "Gi√∫p t√¥i s·ª≠a l·ªói ng·ªØ ph√°p",
              "Luy·ªán ph√°t √¢m t·ª´ n√†y",
              "Gi·∫£i th√≠ch c·∫•u tr√∫c c√¢u",
              "G·ª£i √Ω t·ª´ v·ª±ng m·ªõi",
            ].map((suggestion, index) => (
              <button
                key={index}
                onClick={() => setInputMessage(suggestion)}
                className="text-left px-3 py-2 text-sm bg-white border border-gray-200 rounded-lg hover:bg-primary-50 hover:border-primary-300 transition-colors"
              >
                {suggestion}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
