version: "3.8"

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../infra/docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000/api
    depends_on:
      - backend
    networks:
      - elearn-network

  # Backend (Node.js/Express)
  backend:
    build:
      context: ../backend
      dockerfile: ../infra/docker/Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/elearn
      - FRONTEND_URL=http://localhost:3000
      - JWT_SECRET=dev-jwt-secret
    depends_on:
      - mongodb
      - redis
    networks:
      - elearn-network
    volumes:
      - ../backend:/app
      - /app/node_modules

  # MongoDB Database
  mongodb:
    image: mongo:7
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=elearn
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - elearn-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - elearn-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - elearn-network

volumes:
  mongodb_data:
  redis_data:

networks:
  elearn-network:
    driver: bridge
